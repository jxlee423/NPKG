renv::init()
renv::snapshot()
usethis::use_readme_rmd()
install.packages("rmarkdown")
usethis::use_readme_rmd()
install.packages("usethis")
usethis::use_readme_rmd()
renv::snapshot()
file.create("R/NPKG.R")
devtools::document()
#' NPKG (Network - Phenotype Integrated Key Gene Identification)
#'
#' @param gene_data Preprocessed gene expression matrix (genes in columns, samples in rows)
#' @param pheno_data Phenotype data frame containing sample information and traits
#' @param pheno Phenotype trait name
#' @param pheno_group_fn Phenotype grouping function
#' @param p_threshold Module-trait correlation p-value threshold (default = 0.05)
#' @param gs_threshold Gene Significance threshold (default = 0.25)
#' @param mm_threshold Module Membership threshold (default = 0.75)
#' @param degree_top Hub genes degree threshold (default = 0.05)
#' @param clust_threshold Remove outlier samples through clustering (default = 0.95)
#' @param output_dir Output directory
#' @param seed Random Seed
#' @param verbose Whether to show progress messages
#'
#' @importFrom WGCNA allowWGCNAThreads enableWGCNAThreads goodSamplesGenes cutreeStatic pickSoftThreshold blockwiseModules corPvalueStudent labels2colors moduleEigengenes orderMEs TOMsimilarityFromExpr
#' @importFrom stats cor dist hclust quantile coef
#' @importFrom glmnet cv.glmnet
#' @importFrom caret rfeControl rfe rfFuncs
#' @importFrom randomForest randomForest
#' @importFrom dplyr %>%
#' @importFrom methods as
#'
#' @return
#' \itemize{
#'   \item modules - significantly phenotype_related modules
#'   \item final_genes - Key genes in the final screen
#' }
#' @export
NPKG <- function(
gene_data, # Preprocessed gene expression matrix (genes in columns, samples in rows)
pheno_data, # Phenotype data frame containing sample information and traits
pheno, # Phenotype trait name
pheno_group_fn, # Phenotype grouping function
p_threshold = 0.05, # Module-trait correlation p-value threshold
gs_threshold = 0.25, # Gene Significance threshold
mm_threshold = 0.75, # Module Membership threshold
degree_top = 0.05, # Hub genes degree threshold
clust_threshold = 0.95, # Remove outlier samples through clustering
output_dir = ".", # Output directory
seed = 423, # Random Seed
verbose = TRUE # Whether to show progress messages
) {
allowWGCNAThreads() # Allow maximum threads
enableWGCNAThreads() # Enable multithreading
# Data preprocessing---------------------------------------------------------------
if (verbose) message("\n1. Data preprocessing...")
d <- t(gene_data)
# Check data quality
gsg <- goodSamplesGenes(d, verbose = 3)
if (!gsg$allOK) stop("Data quality check failed. Please check genes/samples")
# Remove outlier samples through clustering
sampleTree <- hclust(dist(d), method = "average")
clust <- cutreeStatic(sampleTree,
cutHeight = quantile(sampleTree$height, clust_threshold),
minSize = 10
)
keepSamples <- (clust == 1)
d <- d[keepSamples, ]
pheno_data <- pheno_data[keepSamples, ]
# Building network---------------------------------------------------------------
if (verbose) message("\n2. Building network...")
# Automatically determine soft threshold
powers <- c(1:10, seq(12, 20, 2))
sft <- pickSoftThreshold(d, powerVector = powers, verbose = 0)
power <- sft$powerEstimate
# Construct modules
net <- blockwiseModules(
d,
power = power,
maxBlockSize = 30000,
TOMType = "unsigned",
minModuleSize = 30,
reassignThreshold = 0,
mergeCutHeight = 0.25,
numericLabels = TRUE,
pamRespectsDendro = FALSE,
saveTOMs = FALSE,
verbose = 3
)
# Module-phenotype association analysis-------------------------------------------------------
if (verbose) message("\n3. Analyzing module-phenotype associations...")
# Calculate module eigengenes and phenotype correlations
module_colors <- labels2colors(net$colors)
MEs0 <- moduleEigengenes(d, module_colors)$eigengenes
MEs <- orderMEs(MEs0)
moduleTraitCor <- cor(MEs, pheno_data[[pheno]], use = "p", method = "spearman")
moduleTraitP <- corPvalueStudent(moduleTraitCor, nrow(d))
# Filter significant modules (p ≤ p_threshold)
sig_modules <- which(round(moduleTraitP, 2) <= p_threshold)
sig_module_names <- substring(colnames(MEs)[sig_modules], 3)
# Key gene screening (GS + MM)---------------------------------------------------------------
if (verbose) message("\n4. Key gene screening (GS + MM)...")
# Calculate GS for all genes
geneTraitSignificance_all <- as.data.frame(
cor(d, pheno_data[[pheno]], use = "p", method = "spearman")
)
colnames(geneTraitSignificance_all) <- paste0("GS.", pheno)
# Calculate MM for all genes
modNames <- substring(names(MEs), 3)
geneModuleMembership <- as.data.frame(
cor(d, MEs, use = "p")
)
names(geneModuleMembership) <- paste0("MM", modNames)
# Initialize storage
GS_genes <- character()
MM_genes <- character()
GSMM_genes <- character()
all_candidates <- character()
# Process each significant module
for (module in sig_module_names) {
# Get current module genes
module_genes <- names(net$colors)[which(module_colors == module)]
# Extract MM and GS
current_MM <- geneModuleMembership[module_genes, paste0("MM", module)]
current_GS <- geneTraitSignificance_all[module_genes, paste0("GS.", pheno)]
# Filter genes meeting both criteria
valid_genes <- module_genes[abs(current_GS) >= gs_threshold & abs(current_MM) >= mm_threshold]
# Store separately
GS_genes <- c(GS_genes, module_genes[abs(current_GS) >= gs_threshold])
MM_genes <- c(MM_genes, module_genes[abs(current_MM) >= mm_threshold])
GSMM_genes <- c(GSMM_genes, valid_genes)
}
GS_genes <- unique(GS_genes)
MM_genes <- unique(MM_genes)
GSMM_genes <- unique(GSMM_genes)
# result
cat(
"GS genes count:", length(GS_genes),
"\nMM genes count:", length(MM_genes),
"\nGSMM genes count:", length(GSMM_genes)
)
# Key gene screening (Degree)---------------------------------------------------------------
if (verbose) message("\n5. Key gene screening (Degree)...")
TOM <- TOMsimilarityFromExpr(d, power = power, networkType = "unsigned")
TOM <- as.matrix(TOM)
# Ensure correct gene names
genes <- colnames(d)
rownames(TOM) <- genes
colnames(TOM) <- genes
# Hub gene identification
get_top_hub_genes <- function(module_genes, TOM, top_percent = 0.05) {
# Extract submatrix
sub_tom <- TOM[module_genes, module_genes]
# Calculate connectivity
connectivity <- rowSums(sub_tom, na.rm = TRUE)
# Select top genes
n_top <- max(1, round(length(module_genes) * top_percent))
hub_genes <- names(sort(connectivity, decreasing = TRUE)[1:n_top])
return(hub_genes)
}
# Process each significant module
degree_genes <- list()
for (mod_color in sig_module_names) {
mod_genes <- colnames(d)[module_colors == mod_color]
if (length(mod_genes) > 0) {
degree_genes[[mod_color]] <- get_top_hub_genes(mod_genes, TOM)
message("Module ", mod_color, " identified ", length(degree_genes[[mod_color]]), " hub genes")
}
}
hubgenes <- unlist(degree_genes, use.names = FALSE)
hubgenes <- unique(hubgenes)
all_candidates <- intersect(GSMM_genes, hubgenes)
# Key gene re_screening (Machine learning)-----------------------------------------------------------
if (verbose) message("\n5. Key gene re_screening (Machine learning)...")
# Prepare data
expr <- scale(t(gene_data)[rownames(d), all_candidates])
y <- pheno_group_fn(pheno_data[[pheno]]) %>% as.factor()
set.seed(seed)
# Random Forest
ctrl <- rfeControl(functions = rfFuncs, method = "cv", number = 10)
rf_model <- rfe(expr, y, sizes = seq(10, ncol(expr), 10), rfeControl = ctrl)
rf_genes <- rf_model$optVariables
# LASSO
cv_fit <- cv.glmnet(expr, y, family = "binomial", alpha = 1)
coefs <- coef(cv_fit, s = "lambda.min")[, 1]
lasso_genes <- names(coefs)[coefs != 0][-1]
# Determine final genes
final_genes <- intersect(rf_genes, lasso_genes)
# Return results---------------------------------------------------------------
return(list(
modules = colnames(MEs)[sig_modules],
final_genes = final_genes
))
}
devtools::document()
install.packages("Rcpp")
devtools::document()
devtools::document()
install.packages("devtools")
devtools::document()
warning()
devtools::document()
usethis::use_mit_license()
devtools::check()
install.packages("BiocManager")
BiocManager::install("WGCNA")
library(WGCNA)
BiocManager::install("WGCNA")
BiocManager::install("WGCNA")
devtools::check()
BiocManager::install("GO.db")
devtools::check()
BiocManager::install("impute")
library(WGCNA)
BiocManager::install("WGCNA", dependencies = TRUE)  # 强制安装所有依赖
BiocManager::install("WGCNA", force = TRUE)
devtools::check()
devtools::install_github("jxlee423/NPKG")
library(NPKG)
